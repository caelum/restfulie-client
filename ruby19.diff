From d15897b582717d1dce5129cb3b9cfd32929fb6c7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Elomar=20Fran=C3=A7a?= <elomar@maisweb.org>
Date: Thu, 27 May 2010 20:51:27 -0300
Subject: [PATCH 1/2] Small fixes to get tests running on ruby1.9

---
 Gemfile                                            |   11 ++++++++---
 Rakefile                                           |    2 ++
 lib/restfulie/common/representation/atom/base.rb   |    3 +--
 spec/units/client/http/marshal_spec.rb             |    2 +-
 spec/units/client/mikyung_spec.rb                  |    3 ++-
 .../action_controller/controller_base_spec.rb      |    1 +
 .../action_controller/restful_responder_spec.rb    |   16 ++++++++++++----
 7 files changed, 27 insertions(+), 11 deletions(-)

diff --git a/Gemfile b/Gemfile
index 855e3cc..53b033b 100644
--- a/Gemfile
+++ b/Gemfile
@@ -4,18 +4,23 @@ source :gemcutter
 gem "rails"
 gem "libxml-ruby"
 
-
 gem "rack-conneg"
 gem "responders_backport"
 gem "json_pure"
 gem "sqlite3-ruby"
 gem "yard"
-gem "ruby-debug"
+
+if RUBY_VERSION < "1.9"
+  gem "ruby-debug"
+else
+  gem "ruby-debug19", :require => "ruby-debug"
+end
 
 group :test do  
-	gem "nokogiri"
+  gem "nokogiri"
   gem "rspec-rails"
   gem "rcov"
   gem "sinatra"
+  gem "test-unit", "= 1.2.3"
 end  
 
diff --git a/Rakefile b/Rakefile
index 17cdb34..a65e60c 100644
--- a/Rakefile
+++ b/Rakefile
@@ -1,3 +1,5 @@
+# encoding: UTF-8
+
 require 'rubygems'
 require 'rubygems/specification'
 require 'rake'
diff --git a/lib/restfulie/common/representation/atom/base.rb b/lib/restfulie/common/representation/atom/base.rb
index a2918f9..bf677a2 100644
--- a/lib/restfulie/common/representation/atom/base.rb
+++ b/lib/restfulie/common/representation/atom/base.rb
@@ -263,7 +263,6 @@ module Restfulie::Common::Representation::Atom
       @doc["rel"] = value
     end
 
-    alias_method :__type__, :type
     def type
       @doc["type"]
     end
@@ -372,4 +371,4 @@ module Restfulie::Common::Representation::Atom
     end
   end
 
-end
\ No newline at end of file
+end
diff --git a/spec/units/client/http/marshal_spec.rb b/spec/units/client/http/marshal_spec.rb
index b49757a..19b0367 100644
--- a/spec/units/client/http/marshal_spec.rb
+++ b/spec/units/client/http/marshal_spec.rb
@@ -1,5 +1,5 @@
 require File.expand_path(File.dirname(__FILE__) + '/../../spec_helper')
-require File.join(File.dirname(__FILE__),'..', '..', 'lib','data_helper')
+require File.expand_path(File.dirname(__FILE__) + '/../../lib/data_helper')
 
 context Restfulie::Client::HTTP::RequestMarshaller do
 
diff --git a/spec/units/client/mikyung_spec.rb b/spec/units/client/mikyung_spec.rb
index 1917c50..c354194 100644
--- a/spec/units/client/mikyung_spec.rb
+++ b/spec/units/client/mikyung_spec.rb
@@ -5,6 +5,7 @@ context Restfulie::Client::Mikyung do
   context "when trying to achieve a goal" do
   
     before do
+      @goal = Object.new
       @client = Object.new
       @start = Object.new
       @walker = Object.new
@@ -51,4 +52,4 @@ context Restfulie::Client::Mikyung do
     
   end
 
-end
\ No newline at end of file
+end
diff --git a/spec/units/server/action_controller/controller_base_spec.rb b/spec/units/server/action_controller/controller_base_spec.rb
index 04342ef..1817a25 100644
--- a/spec/units/server/action_controller/controller_base_spec.rb
+++ b/spec/units/server/action_controller/controller_base_spec.rb
@@ -40,6 +40,7 @@ describe Restfulie::Server::ActionController::Base, :type => :controller do
   end
   
   it "calls to_atom in show's object if object respond_to :to_atom" do
+    @atom = Object.new
     @object.should_receive(:to_atom).once.and_return(@atom)
     @atom.should_receive(:to_xml).once
     get :show_with_mock, :id => 1
diff --git a/spec/units/server/action_controller/restful_responder_spec.rb b/spec/units/server/action_controller/restful_responder_spec.rb
index 6dc3932..205e176 100644
--- a/spec/units/server/action_controller/restful_responder_spec.rb
+++ b/spec/units/server/action_controller/restful_responder_spec.rb
@@ -60,9 +60,17 @@ describe RestfulController, :type => :controller do
       response.status.to_i.should == 200
     end
     
-    it "does not use cache in PUT requests"
-    it "does not use cache in POST requests" 
-    it "does not set cache for new records"
+    it "does not use cache in PUT requests" do
+      pending
+    end
+
+    it "does not use cache in POST requests" do
+      pending
+    end
+
+    it "does not set cache for new records" do
+      pending
+    end
     
     it "does not set cache if Last-Modified is already in response" do
       get :single, :last_modified => true
@@ -83,4 +91,4 @@ describe RestfulController, :type => :controller do
       response.status.to_i.should == 200
     end
   end      
-end
\ No newline at end of file
+end
-- 
1.7.0


From 55415d83b50f916dedc3a9cd6328503dd8c17f17 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Elomar=20Fran=C3=A7a?= <elomar@maisweb.org>
Date: Thu, 27 May 2010 20:58:06 -0300
Subject: [PATCH 2/2] Removing core_ext/proc, that wasn't being used anywhere

---
 lib/restfulie/common.rb                 |    1 -
 lib/restfulie/common/core_ext.rb        |    5 -
 lib/restfulie/common/core_ext/proc.rb   |   48 -----------
 spec/units/common/core_ext/proc_spec.rb |  135 -------------------------------
 4 files changed, 0 insertions(+), 189 deletions(-)
 delete mode 100644 lib/restfulie/common/core_ext.rb
 delete mode 100644 lib/restfulie/common/core_ext/proc.rb
 delete mode 100644 spec/units/common/core_ext/proc_spec.rb

diff --git a/lib/restfulie/common.rb b/lib/restfulie/common.rb
index ecdd5a1..b3ed716 100644
--- a/lib/restfulie/common.rb
+++ b/lib/restfulie/common.rb
@@ -12,7 +12,6 @@ end
 %w(
   errors
   logger
-  core_ext
   representation
   converter
 ).each do |file| 
diff --git a/lib/restfulie/common/core_ext.rb b/lib/restfulie/common/core_ext.rb
deleted file mode 100644
index bdc2392..0000000
--- a/lib/restfulie/common/core_ext.rb
+++ /dev/null
@@ -1,5 +0,0 @@
-%w(
-  proc
-).each do |file|
-  require File.join(File.dirname(__FILE__), 'core_ext', file)
-end
diff --git a/lib/restfulie/common/core_ext/proc.rb b/lib/restfulie/common/core_ext/proc.rb
deleted file mode 100644
index 615ae27..0000000
--- a/lib/restfulie/common/core_ext/proc.rb
+++ /dev/null
@@ -1,48 +0,0 @@
-class Proc
-  attr_accessor :helpers
-  alias_method :old_call, :call
-
-  def call(*args)
-    @helpers.nil? ? old_call(*args): call_include_helpers(@helpers, *args)
-  end
-
-  def call_include_helpers(helpers, *args)
-    helpers      = [helpers] unless helpers.kind_of?(Array) 
-    helpers      = helpers.map { |helper| Object.new.send(:extend, helper) }
-    block_caller = eval("self", self.binding)
-
-    m = extensible_module(block_caller)
-    m.send(:define_method, :method_missing) do |symbol, *args, &block|
-      mod = helpers.find { |h| h.respond_to?(symbol) }
-      mod.nil? ? super : mod.send(symbol, *args, &block)
-    end
-
-    block_caller.extend(m)
-    result = old_call(*args)
-    m.send(:remove_method, :method_missing)
-
-    result
-  end
-
-private
-
-  # Search for extending the module in ancestors
-  def extensible_module(object)
-    ancestors  = object.instance_eval { (class << self; self; end) }.ancestors
-    
-    extend_mod = ancestors.find { |ancestor|
-      !ancestor.instance_methods.include?("method_missing") && ancestor.instance_eval { (class << self; self; end) }.ancestors.include?(ProcIncludedHelpers)
-    }
-
-    if extend_mod.nil?    
-      extend_mod = Module.new
-      extend_mod.extend(ProcIncludedHelpers)
-    end
-
-    extend_mod
-  end
-
-  module ProcIncludedHelpers; end
-
-end
-
diff --git a/spec/units/common/core_ext/proc_spec.rb b/spec/units/common/core_ext/proc_spec.rb
deleted file mode 100644
index 7d763d0..0000000
--- a/spec/units/common/core_ext/proc_spec.rb
+++ /dev/null
@@ -1,135 +0,0 @@
-require File.expand_path(File.dirname(__FILE__) + '/../../spec_helper')
-
-context Proc do
-  it "should attribute helpers accessor" do
-    block = lambda {}
-    block.helpers = ProcSpec::DowncaseHelper
-    block.helpers.should eql(ProcSpec::DowncaseHelper)
-  end
-  
-  it "should allow an extension module" do
-    @title = "Proc Extended Spec"
-    block = lambda do
-      title(@title)
-    end
-
-    block.helpers = ProcSpec::DowncaseHelper
-    block.call.should eql(@title.downcase)
-  end
-  
-  it "should allow multi extension module" do
-    @title = "Proc Extended Spec"
-    @url   = "example.com"
-    block = lambda do
-      [title(@title), add_http(@url)]
-    end
-
-    block.helpers = [ProcSpec::DowncaseHelper, ProcSpec::HttpHelper]
-    block.call.should eql([@title.downcase, "http://#{@url}"])
-  end
-
-  it "should allow nested blocks" do
-    @title = "Proc Extended Spec"
-    @url   = "example.com"
-    block = lambda do
-      inter_block = lambda do
-        title(@title)
-      end
-      inter_block.call_include_helpers(ProcSpec::DowncaseHelper)
-      [title(@title), add_http(@url)]
-    end
-    block.helpers = [ProcSpec::DowncaseHelper, ProcSpec::HttpHelper]
-    block.call.should eql([@title.downcase, "http://#{@url}"])
-  end
-  
-  it "should not change context class" do
-    f = ProcSpec::Foo.new
-    f.exec_block { |a| a.links << link("self", "http://example.com/albums/1") }
-    f.should_not respond_to(:link)
-  end
-  
-  it "should pass parameters for block" do
-    f = ProcSpec::Foo.new
-    f.exec_block { |a| a }.should be_kind_of(ProcSpec::Bar)
-  end
-  
-  it "should not replace original method missing" do
-    f = ProcSpec::Foo.new
-    f.exec_block { |a| a }
-    f.booo.should eql("method booo not implemented")
-  end
-
-  it "should pass block to helper method" do
-    result = nil
-    f = Proc.new do
-      exec_block do
-        result = "Internal block executed"
-      end
-    end
-
-    f.helpers = ProcSpec::BlockPass
-    f.call
-    result.should == "Internal block executed"
-  end
-
-  it "should raise error" do
-    f = Proc.new {}
-    f.call_include_helpers(ProcSpec::BlockPass)
-    lambda {
-      foo_method(nil)
-    }.should raise_error(NameError)
-  end
-
-  it "should raise error for argument" do
-    f = Proc.new { title("title", "not valid argument") }
-    lambda {
-      f.call_include_helpers(ProcSpec::DowncaseHelper)
-    }.should raise_error(ArgumentError)
-  end
-  
-end # context Proc
-
-module ProcSpec
-  module DowncaseHelper
-    def title(value)
-      value.downcase
-    end
-  end
-
-  module HttpHelper
-    def add_http(value)
-      "http://#{value}"
-    end
-  end
-
-  module BlockPass
-    def exec_block(&block)
-      block.call
-    end
-  end
-
-  class Bar
-    attr_accessor :links
-    
-    def initialize
-      @links = []
-    end
-  end
-
-  class Foo
-    def exec_block(&block)
-      block.call_include_helpers(FooHelpers, Bar.new)
-    end
-  
-    def method_missing(symbol, *args)
-      "method #{symbol} not implemented"
-    end
-  
-    module FooHelpers
-      def link(rel, href)
-        [rel, href]
-      end
-    end
-  end
-end
-
-- 
1.7.0

